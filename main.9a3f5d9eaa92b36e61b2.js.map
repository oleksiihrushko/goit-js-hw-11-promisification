{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAEMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAExBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAAX,OACtBb,QAAQC,QACNW,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,OAI7DC,EAAU,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAInC,IAIMG,EAAkB,SAAAC,GACtB,OAAO,IAAIpB,SAAQ,SAACC,EAASoB,GAC3B,IAN+BC,EAAKC,EAM9BzB,GANyBwB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDpB,YAAW,WACUsB,KAAKE,SAAW,IAGjCzB,EAAQ,CAAE0B,GAAIP,EAAYO,GAAIvB,KAAMN,IAEtCuB,EAAOD,EAAYO,MAClB7B,OAID8B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,K","file":"main.9a3f5d9eaa92b36e61b2.js","sourcesContent":["/////////////////////////////////////////////  TASK-01  ///////////////////////////////////////////////////////\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger1); // Resolved after 2000ms\ndelay(1000).then(logger1); // Resolved after 1000ms\ndelay(1500).then(logger1); // Resolved after 1500ms\n\n/////////////////////////////////////////////  TASK-02  ///////////////////////////////////////////////////////\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) =>\n  Promise.resolve(\n    allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    ),\n  );\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n/////////////////////////////////////////////  TASK-03  ///////////////////////////////////////////////////////\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}